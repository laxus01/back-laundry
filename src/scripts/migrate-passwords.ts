import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { Repository } from 'typeorm';
import { User } from '../users/entities/user.entity';
import { getRepositoryToken } from '@nestjs/typeorm';
import * as bcrypt from 'bcryptjs';

async function migratePasswords() {
  console.log('üîÑ Iniciando migraci√≥n de contrase√±as...');
  
  // Crear aplicaci√≥n NestJS
  const app = await NestFactory.createApplicationContext(AppModule);
  
  try {
    // Obtener repositorio de usuarios
    const userRepository = app.get<Repository<User>>(getRepositoryToken(User));
    
    // Obtener todos los usuarios
    const users = await userRepository.find();
    console.log(`üìä Encontrados ${users.length} usuarios para migrar`);
    
    let migratedCount = 0;
    let skippedCount = 0;
    
    for (const user of users) {
      // Verificar si la contrase√±a ya est√° hasheada (bcrypt hash empieza con $2a$, $2b$, $2x$, $2y$)
      if (user.password.match(/^\$2[abxy]\$\d+\$/)) {
        console.log(`‚è≠Ô∏è  Usuario '${user.user}' ya tiene contrase√±a hasheada, omitiendo...`);
        skippedCount++;
        continue;
      }
      
      // Validar que la contrase√±a no est√© vac√≠a
      if (!user.password || user.password.trim() === '') {
        console.log(`‚ö†Ô∏è  Usuario '${user.user}' tiene contrase√±a vac√≠a, omitiendo...`);
        skippedCount++;
        continue;
      }
      
      try {
        // Crear backup de la contrase√±a original (solo para logging, no se guarda)
        const originalPassword = user.password;
        
        // Hashear la contrase√±a con bcrypt (salt rounds: 10)
        const hashedPassword = await bcrypt.hash(user.password, 10);
        
        // Actualizar en la base de datos
        await userRepository.update(user.id, { password: hashedPassword });
        
        console.log(`‚úÖ Usuario '${user.user}' migrado exitosamente`);
        migratedCount++;
        
        // Verificar que el hash funciona correctamente
        const isValid = await bcrypt.compare(originalPassword, hashedPassword);
        if (!isValid) {
          throw new Error(`Verificaci√≥n de hash fall√≥ para usuario '${user.user}'`);
        }
        
      } catch (error) {
        console.error(`‚ùå Error migrando usuario '${user.user}':`, error.message);
        // Continuar con el siguiente usuario en caso de error
      }
    }
    
    console.log('\nüìà Resumen de migraci√≥n:');
    console.log(`‚úÖ Usuarios migrados: ${migratedCount}`);
    console.log(`‚è≠Ô∏è  Usuarios omitidos: ${skippedCount}`);
    console.log(`üìä Total procesados: ${users.length}`);
    
    if (migratedCount > 0) {
      console.log('\nüéâ ¬°Migraci√≥n completada exitosamente!');
      console.log('‚ö†Ô∏è  IMPORTANTE: Aseg√∫rate de actualizar tu c√≥digo de autenticaci√≥n para usar bcrypt.compare()');
    } else {
      console.log('\n ‚ÑπÔ∏è  No se encontraron contrase√±as para migrar');
    }
    
  } catch (error) {
    console.error('üí• Error durante la migraci√≥n:', error);
    process.exit(1);
  } finally {
    // Cerrar la aplicaci√≥n
    await app.close();
  }
}

// Funci√≥n de confirmaci√≥n de seguridad
async function confirmMigration(): Promise<boolean> {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise((resolve) => {
    console.log('\n‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n modificar√° las contrase√±as en la base de datos');
    console.log('üìã Aseg√∫rate de tener un backup de la base de datos antes de continuar');
    console.log('üîÑ Las contrase√±as en texto plano se convertir√°n a hash bcrypt');
    
    rl.question('\n¬øEst√°s seguro de que quieres continuar? (escriba "SI" para confirmar): ', (answer) => {
      rl.close();
      resolve(answer.trim().toUpperCase() === 'SI');
    });
  });
}

// Ejecutar migraci√≥n con confirmaci√≥n
async function main() {
  console.log('üîê Script de Migraci√≥n de Contrase√±as - Laundry Backend');
  console.log('================================================\n');
  
  const confirmed = await confirmMigration();
  
  if (!confirmed) {
    console.log('‚ùå Migraci√≥n cancelada por el usuario');
    process.exit(0);
  }
  
  await migratePasswords();
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• Error fatal:', error);
    process.exit(1);
  });
}

export { migratePasswords };
